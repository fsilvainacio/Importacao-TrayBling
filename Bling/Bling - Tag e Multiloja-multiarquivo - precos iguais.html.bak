<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8"/>
    <title>Bling - Tag e Multiloja</title>
	
	<style>
		body{
			font-family:arial, helvetica, sans-serif;
			color: #44464C;
		}
		h1 { text-align:center;}
		.campo{
			margin-bottom: 5px;
		}
		.campo > label {
			display: inline-block;
			width: 150px;
		}
		.campo input, .campo select {
			display: inline-block;
			width: 150px;
			padding: 3px;
			box-sizing: border-box;
		}
		.coluna1, .coluna2 {
		    display: inline-block;
			width: 500px;
			vertical-align: top;
		}
		
		input, select{
			margin-right: 3px;
		}
	</style>
</head>
<body>
	<a href="#" onclick="window.history.back()">< Voltar</a>
	<h1>Bling - Tag e Multiloja</h1>
	<p>
		Após a importação dos produtos da TRAY, realizar o seguinte processo para incluir Tag de Marca, Marca e Multiloja com ajuste de preço.
		<br>
		As Tags de Marca no BLING devem estar iguais as Marcas na TRAY.
		<br><br>
		Produtos Furlight: (Não abrir marcas) Outros: 0,4545454545 1-Estrangeira. Loja Destino Furlight (importar só arquivo multiloja)
		<br><br>
		<!--
		Passos:
		<br> - 1. [BLING] Filtre na lista de produtos:
		<br> ------ [Tag] = Sem Tag.
		<br> ------ [Lojas Virtuais] - Vinculados = Blight E-commerce de Iluminação.
		<br> - 2. [BLING] Selecione todos os produtos.
		<br> - 3. [BLING] Exporte a lista de vinculo de produtos: [Ações] -> [Exportar planilha de produtos selecionados para vínculo multiloja]
		<br> ------ [Loja Virtual] = Blight E-commerce de Iluminação
		<br> ------ [Exportar] = Somente Vinculados.
		<br> ------ O arquivo baixado estará zipado, necessitando extrair o conteúdo.
		<br> - 4. [BLING] Exporte a lista de produtos: [Ações] -> [Exportar dados para planilha]
		<br>
		<br> - 5. [NESTE PROGRAMA] Carregue o arquivo clicando em [Abrir Marcas]: marcas_fator_multiplicacao.csv
		<br> ------ Se for necessário ajustar o Fator Multiplicador de alguma Marca, pode salvar o arquivo para futuras importações.
		<br>
		<br> [ATENÇÃO] No passo 6 será gerado 2 arquivos, pode ser necessário dar permissão ao navegador para baixar o segundo arquivo.
		<br> - 6. [NESTE PROGRAMA] Carregue os 2 arquivos exportados nos respectivos campos: [Arquivo: Produtos selecionados para vínculo multiloja] e [Arquivo: Dados para planilha]
		<br> ------ Clique em Executar.
		<br>
		<br> - 7. [BLING] Utilize os arquivos gerados: 
		<br> ------ [Preferencias] -> [Importação de dados] -> [Importar e Atualizar Vínculo Produtos Multiloja]
		<br> ------ [Preferencias] -> [Importação de dados] -> [Importar e Atualizar Produtos]
		-->
		<br><br>
		
		<!-- PRODUTO TESTADO 11787 -->
		
	</p>
	<hr>
	<br>
	<!--<div class="coluna1">
		<div id="fator_multiplicador_marca">
			Fator Multiplicador Por Marca:
		</div>
		<div class="campo"> 
			<input type="text" value="OUTROS" disabled="disabled">
			
			<input type="number" class="fator_multiplicador_valor_outros" value="1">
			<select class="origem_outros">
				<option value="">Não Preencher Origem</option>
				<option value="0" selected>0 - Nacional, exceto as indicadas nos códigos 3, 4, 5 e 8</option>
				<option value="1">1 - Estrangeira - Importação direta, exceto a indicada no código 6</option>
				<option value="2">2 - Estrangeira - Adquirida no mercado interno, exceto a indicada no código 7</option>
				<option value="3">3 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 40% e inferior ou igual a 70%</option>
				<option value="4">4 - Nacional, cuja produção tenha sido feita em conformidade com os processos produtivos básicos de que tratam as legislações citadas nos Ajustes</option>
				<option value="5">5 - Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%</option>
				<option value="6">6 - Estrangeira - Importação direta, sem similar nacional, constante em lista da CAMEX</option>
				<option value="7">7 - Estrangeira - Adquirida no mercado interno, sem similar nacional, constante em lista da CAMEX</option>
				<option value="8">8 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%</option>
			</select>
		</div>
		<div class="campo">
			<button type="button" onclick="marca_adicionar()">Adicionar Marca</button>
			<button type="button" onclick="marca_salvar()">Salvar Marcas</button>
			<button type="button" onclick="marca_abrir()">Abrir Marcas</button>
			<input type="file" id="input_marca_abrir" style="display:none" onchange="marca_abrir_modelo(this.files)">
		</div>
	</div>-->
	
	<div class="coluna2">
		<div class="campo">
			<label>Loja Destino:</label>
			<select id="nome_loja">
				<option value="BLight Premium">BLight Premium</option>
				<!--<option value="BLight E-commerce de Iluminação">BLight E-commerce de Iluminação</option>
				<option value="Furlight">Furlight</option>-->
			</select>
		</div>
		<br>
		
		<label style="display: block;">Bling: Produtos selecionados para vínculo multiloja</label>
		<input type="file" id="inputCSV_multiloja" multiple>
		<br><br>
		<label style="display: block;">* Bling: Dados para planilha</label>
		<input type="file" id="inputCSV" multiple>
		<br><br>
		<label style="display: block;">* TRAY: Arquivo CSV (Id; Produto; Referência; Características de variações; Categoria; Marca)</label>
		<input type="file" id="inputCSVTray" multiple>
		
		<br><br><button id="btn-executar" type="button" onclick="pegaCSV2()">Executar</button>
		<span id="msg-executar" style="display:none">Aguarde! Executando...</span>
	</div>

</body>
</html>

<script src="script/jquery.min.js" type="text/javascript"></script>
<script src="script/papaparse.min.js" type="text/javascript"></script>

<script src="categorias.js" type="text/javascript"></script>
<script src="marcas.js" type="text/javascript"></script>

<script>
	// Converte float em REAL mascarado (1234.56 => 1.234,56)
	Number.prototype.mask = function(n = 2) {

		numText = this.toString();
		if (numText.indexOf(".") != -1) {
			numText = numText.split('.', 2);
			n = Math.max(Math.min(n, numText[1].length), 2);
		} else {
			n = 2;
		}

		x = 3;
		s = '.';
		c = ',';
		var re = '\\d(?=(\\d{' + (x || 3) + '})+' + (n > 0 ? '\\D' : '$') + ')',
			num = this.toFixed(Math.max(0, ~~n));
		return (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ','));
	};
	// Converte REAL mascarado em FLoat ('1.234,56' => 1234.56)
	String.prototype.unmask = function(){
		num = this;
		return (num == '' ? 0 : parseFloat((num).replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace('.', '').replace(',', '.')));
	};
	
				
	
	var $local = $('#fator_multiplicador_marca');	
	var nome_arquivo_modelo = 'marcas_fator_multiplicacao.csv';
	var arquivo_modelo = [];
	
	var nome_arquivo = '';
	var nome_arquivo_multiloja = '';

	var marca_html = '<div class="campo"> <input type="text" class="fator_multiplicador_marca" value="" placeholder="Nome Marca"> <input type="number" class="fator_multiplicador_valor" value="1.00">';
	marca_html += '<select class="origem"> <option value="">Não Preencher Origem</option> <option value="0">0 - Nacional, exceto as indicadas nos códigos 3, 4, 5 e 8</option> <option value="1">1 - Estrangeira - Importação direta, exceto a indicada no código 6</option><option value="2">2 - Estrangeira - Adquirida no mercado interno, exceto a indicada no código 7</option><option value="3">3 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 40% e inferior ou igual a 70%</option><option value="4">4 - Nacional, cuja produção tenha sido feita em conformidade com os processos produtivos básicos de que tratam as legislações citadas nos Ajustes</option><option value="5">5 - Nacional, mercadoria ou bem com Conteúdo de Importação inferior ou igual a 40%</option><option value="6">6 - Estrangeira - Importação direta, sem similar nacional, constante em lista da CAMEX</option><option value="7">7 - Estrangeira - Adquirida no mercado interno, sem similar nacional, constante em lista da CAMEX</option><option value="8">8 - Nacional, mercadoria ou bem com Conteúdo de Importação superior a 70%</option></select>';
	marca_html += '<button type="button" onclick="marca_remover(this)">X</button> </div>';
	
	function marca_adicionar() {
		$local.append(marca_html);
	}
	function marca_remover(elemento) {
		$(elemento).closest('.campo').remove();
	}
	function marca_abrir() {
		console.info('marca_abrir')
		$('#input_marca_abrir').val('').click();
	}
	var modelo_leitorDeCSV = new FileReader();
	
	function marca_abrir_modelo(inputFile) {
		var file = inputFile[0];
		nome_arquivo_modelo = file.name;
		if (nome_arquivo_modelo.slice(-3) != 'csv') {
			alert('Arquivo Modelo Inválido');
		} else {
			modelo_leitorDeCSV.readAsText(file);
			setTimeout(function(){
				ler_marca_modelo(modelo_leitorDeCSV.result);
			}, 10);
		}
	}
	function ler_marca_modelo(evt) {
		// Parse CSV string
		var data = Papa.parse(evt);	
			console.info('data', data);		
			$local.children('div').remove();
			arquivo_modelo = [];
		for (var i=0; i<data['data'].length; i++) { // Linha por Linha
			var fileLine = data['data'][i];
			if (fileLine != '') {
				//fileLine = fileLine.split(';');
				
				arquivo_modelo.push(fileLine.clone());	
				
				$local.append(marca_html);
				$ultimo = $local.children('div').last()
				$ultimo.find('.fator_multiplicador_marca').val(fileLine[0]);
				
				var fm = fileLine[1];
				fm = parseFloat(fm.replace(',', '.'));
				$ultimo.find('.fator_multiplicador_valor').val(fm);
				
				$ultimo.find('.origem').val(fileLine[2]);
			}
			
		}
	}
	function marca_salvar() {
		get_fator_multiplicacao();
		var csv = Papa.unparse(arquivo_modelo, {"delimiter": ";"});
		
		var blob = new Blob([csv],
			{ type: "data:text/csv;charset=utf-8" });
		saveAs(blob, nome_arquivo_modelo);
	}
	function get_fator_multiplicacao() {
		arquivo_modelo = [];
		
		$local.children('div').each(function(index, element){
			//console.info('index', index)
			//console.info('element', element)
			var marcaX = $(element).find('.fator_multiplicador_marca').val();
			var valorX = $(element).find('.fator_multiplicador_valor').val();
			var origemX = $(element).find('.origem').val();
			valorX = parseFloat(valorX.replace(',', '.'));
				
			arquivo_modelo.push([marcaX, valorX, origemX]);
		});
	}
	

	var teste1 = [];
	
	
	function readmultifiles(file, arquivo) {
		return new Promise(resolve => {
		
			var name = file.name;
			var reader = new FileReader();
			
			if (name.slice(-3) != 'csv') {
				alert('Arquivo não está em CSV (Delimitado por vírgulas)');
			} else {
			
				reader.onload = function(e) {
				
					var bin = e.target.result; //get file content
					
					bin = bin.trim();
					
					var arquivo_texto = Papa.parse(bin);
					arquivo_texto = arquivo_texto['data'];
					//arquivo_texto.splice(0, 1); // Remover primeira linha de cabeçalho
					
					if (arquivo == 1) { // Bling - Dados para planilha
						for (var at = 0; at < arquivo_texto.length; at++) {
						
							//console.info('arquivo_texto[at]', arquivo_texto[at].length)
							arquivo_texto[at][41] = '';	// Apagar Descrição
							
							if (arquivo_texto[at].length != 59) {
								alert('Arquivo: '+ name + ' esta com numero de colunas diferente de 59' )
							}
							
							if ( arquivo_texto[at][0] == '') {
								continue;
							}
								
							if ( arquivoCSV_planilha.length != 0 && at == 0) {
								continue;
							} else {
								arquivoCSV_planilha.push(arquivo_texto[at].clone());
							}
						}
						nome_arquivo = name;
					} else if (arquivo == 3) { // Tray
						
						var jaAcabouPaiTray = false;
						for (var at = 0; at < arquivo_texto.length; at++) {
							if ( at >= 8 ) { // AQUI 6 quando convertido pelo excel e 8 quando convertido pelo libreoffice
							
								if ( arquivo_texto[at][0] == '' || jaAcabouPaiTray) {
									jaAcabouPaiTray = true;
									continue;
								}
								// Verificar cabeçalho
								if (at == 8) { // AQUI 6 quando convertido pelo excel e 8 quando convertido pelo libreoffice
									if (
										arquivo_texto[at][0] != "ID" ||
										arquivo_texto[at][1] != "PRODUTO" ||
										arquivo_texto[at][2] != "CATEGORIA" ||
										arquivo_texto[at][3] != "PRECO" ||
										arquivo_texto[at][4] != "INICIO_OFERTA" || 
										arquivo_texto[at][5] != "FIM_OFERTA" ||
										arquivo_texto[at][6] != "PRECO_OFERTA" ||
										arquivo_texto[at][7] != "MARCA" ||
										arquivo_texto[at][8] != "REFERENCIA"
									) {
										console.info('arquivo_texto[at]', arquivo_texto[at]);
										alert('Arquivo Tray invalido '+name+' "TRAY: Arquivo CSV (ID; PRODUTO; CATEGORIA; PRECO; INICIO_OFERTA; FIM_OFERTA; PRECO_OFERTA; MARCA)"');
										return false;
									}

								}
								if ( arquivoCSV_tray.length != 0 && at == 8) {
									continue;
								} else {
									arquivoCSV_tray.push(arquivo_texto[at].clone());
								}
							}
						}
					
					} else if (arquivo == 2) { // Bling - Produtos selecionados para vínculo multiloja
						for (var at = 0; at < arquivo_texto.length; at++) {
						
							if ( arquivo_texto[at][0] == '') {
								continue;
							}
								
							if ( arquivoCSV_multiloja.length != 0 && at == 0) {
								continue;
							} else {
								// Não atualiza na premium caso o valor seja zero
								var preco_promocional = arquivo_texto[at][5];
								preco_promocional = preco_promocional.replace('"', '');
								preco_promocional = preco_promocional.replace('"', '');
								preco_promocional = preco_promocional.unmask();
								
								
								var preco_original = arquivo_texto[at][4];
								preco_original = preco_original.replace('"', '');
								preco_original = preco_original.replace('"', '');
								preco_original = preco_original.unmask();
							
								if (preco_promocional != 0 || preco_original != 0) {
									arquivoCSV_multiloja.push(arquivo_texto[at].clone());
									
									//console.info(at,(preco_promocional / preco_original), 'preco:', preco_original, preco_promocional)
									
									if ((preco_promocional / preco_original) <= 0.5 ) {
										//alert(arquivo_texto[at][3] + ' - ' + arquivo_texto[at][2] + '\nPreco Original: ' + preco_original + '\nPreco Promocional: ' +  preco_promocional + '\n' + parseInt((preco_promocional / preco_original)*100) + '% do valor')
										console.info(arquivo_texto[at][3] + ' - ' + arquivo_texto[at][2] + '\nPreco Original: ' + preco_original + '\nPreco Promocional: ' +  preco_promocional + '\n' + parseInt((preco_promocional / preco_original)*100) + '% do valor')
									}
								}
							}
						
							
						}
						nome_arquivo_multiloja = name;
					}
					resolve(true);
				}
			}
			reader.readAsText(file);
		})
	}
	
	
	var arquivoCSV_planilha = [];
	var arquivoCSV_tray = [];
	var arquivoCSV_multiloja = [];
	
	async function pegaCSV2() {
		
		if ($('#inputCSV')[0].files.length != 0) {
			var files = $('#inputCSV')[0].files;
			for (var i = 0; i < files.length; i++) { 
				await readmultifiles(files[i], 1);
			}
		}
		if ($('#inputCSV_multiloja')[0].files.length != 0) {			 
			var files = $('#inputCSV_multiloja')[0].files;
			for (var i = 0; i < files.length; i++) { 
				await readmultifiles(files[i], 2);
			}
		}
		if ($('#inputCSVTray')[0].files.length != 0) {
			var files = $('#inputCSVTray')[0].files;
			for (var i = 0; i < files.length; i++) { 
				await readmultifiles(files[i], 3);
			}
		}
		console.info('executa()')

		executa()
	}
	
	
	/* Arquivo Bling Produtos
		0 - ID
		1 - Código
		2 - Descrição
		3 - Unidade
		4 - Classificação fiscal
		5 - Origem
		6 - Preço
		7 - Valor IPI fixo
		8 - Observações
		9 - Situação
		10 - Estoque
		11 - Preço de custo
		12 - Cód no fornecedor
		13 - Fornecedor
		14 - Localização
		15 - Estoque maximo
		16 - Estoque minimo
		17 - Peso líquido (Kg)
		18 - Peso bruto (Kg)
		19 - GTIN/EAN
		20 - GTIN/EAN da embalagem
		21 - Largura do Produto
		22 - Altura do Produto
		23 - Profundidade do produto
		24 - Data Validade
		25 - Descrição do Produto no Fornecedor
		26 - Descrição Complementar
		27 - Unidade por Caixa
		28 - Produto Variação
		29 - Tipo Produção
		20 - Classe de enquadramento do IPI
		31 - Código da lista de serviços
		32 - Tipo do item
		33 - Grupo de Tags/Tags
		34 - Tributos
		35 - Código Pai
		36 - Código Integração
		37 - Grupo de produtos
		38 - Marca
		39 - CEST
		30 - Volumes
		41 - Descrição Curta
		42 - Cross-Docking
		43 - URL Imagens Externas
		44 - Link Externo
		45 - Meses Garantia no Fornecedor
		46 - Clonar dados do pai
		47 - Condição do produto
		48 - Frete Grátis
		49 - Número FCI
		40 - Vídeo
		51 - Departamento
		52 - Unidade de medida
		53 - Preço de compra
		54 - Valor base ICMS ST para retenção
		55 - Valor ICMS ST para retenção
		56 - Valor ICMS próprio do substituto
		57 - Categoria do produto
	*/
    
	
	
	var sem_ncm = '';
	
	function executa() {
		dados_categorias()
		dados_marcas()
	
		get_fator_multiplicacao();
		var fator_multiplicador_valor_outro = $('.fator_multiplicador_valor_outros').val();
		var origem_outros = $('.origem_outros').val();
		
		var nome_loja 			= document.getElementById('nome_loja').value;
		
		produtos_colunas = '';
		produtos = [];
	
		var status_arquivo = 0; // 0 - Colunas produtos; 	1 - Produtos;

		
		if (arquivoCSV_multiloja != '') {
			
			if (arquivoCSV_multiloja[0].length != 10) {
				alert('Arquivos [Produtos selecionados para vínculo multiloja] errado. Verificar se não foi colocado no campo errado.');
				return false;
			}
		}
		
		
		if (arquivoCSV_planilha.length == 0) {
			alert('Faltando arquivo "Bling: Dados para planilha"');
			return false;
		}
		if (arquivoCSV_planilha[0].length != 59) {
			console.info(arquivoCSV_planilha[0].length + 'correto é 59')
			console.info(arquivoCSV_planilha[0])
			alert('Arquivos "Bling: Dados para planilha" errado. Verificar se não foi colocado no campo errado.');
			return false;
		}
		if (arquivoCSV_tray.length == 0 || arquivoCSV_tray.length == 0) {
			alert('Faltando arquivo "TRAY: Arquivo CSV (Id; Produto; Referência; Características de variações; Categoria; Marca)"');
			return false;
		}
		
	
		$('#btn-executar').hide();
		$('#msg-executar').show();
		
		//console.info('arquivoCSV_planilha', arquivoCSV_planilha.length)
		
		for (var i=1; i<arquivoCSV_planilha.length; i++) { // Linha por Linha
			
			var fileLine = arquivoCSV_planilha[i];
			
			
			//if (!(fileLine[2] == undefined || fileLine[0] == 'ID' || fileLine[0] == '')) {
				produtos.push(fileLine.clone());
				
				// Limpar espaços vazio na descrição (2 - Descrição)
				produtos[produtos.length - 1][2] = produtos[produtos.length - 1][2].trim();
				
				// Coloca UN em produtos sem informação de Unidade (3 - Unidade)
				if (produtos[produtos.length - 1][3].trim() == '') {
					produtos[produtos.length - 1][3] = 'UN';
				} else {
					produtos[produtos.length - 1][3] = produtos[produtos.length - 1][3].trim();
				}
				
				// Coloca Tipo do item = "Mercadoria para Revenda" quando vazio (32 - Tipo do item)
				if (produtos[produtos.length - 1][32].trim() == '') {
					produtos[produtos.length - 1][32] = 'Mercadoria para Revenda';
				}
				
				// Tirar referencia pai dele mesmo (35 - Código Pai)
				if (produtos[produtos.length - 1][1].trim() == produtos[produtos.length - 1][35].trim()) {
					produtos[produtos.length - 1][35] = '';
				}
			
			
				// Pegar Marca de acordo com TRAY (38 - Marca)
				// Aplicar Categoria de acordo com TRAY (57 - Categoria do produto)
				if (produtos[produtos.length - 1][38].trim() == "" || produtos[produtos.length - 1][57].trim() == "") {
					for (var t=1; t<arquivoCSV_tray.length; t++) { // Linha por Linha dos produtos TRAY
						/*
							// arquivoCSV_tray[t][]
							0: "ID"
							1: "PRODUTO"
							2: "CATEGORIA"
							3: "PRECO"
							4: "INICIO_OFERTA"
							5: "FIM_OFERTA"
							6: "PRECO_OFERTA"
							7: "MARCA"
							8: "REFERENCIA"

						*/
						// Se for mesma referência
						if (produtos[produtos.length - 1][1].trim() == arquivoCSV_tray[t][8].trim()) { // 8 - Referencia
							// Atribui Marca
							if (produtos[produtos.length - 1][38].trim() == "") {
								produtos[produtos.length - 1][38] = arquivoCSV_tray[t][7].trim(); // 7 - Marca
							}
							// Atribui Categoria
							if (produtos[produtos.length - 1][57].trim() == "") {
								produtos[produtos.length - 1][57] = get_categoriaTrayBling(arquivoCSV_tray[t][2].trim()); // 2 - Categoria
							}
						}
					}
				}
				
				// Aplicar Tag (33 - Grupo de Tags/Tags)
				if (produtos[produtos.length - 1][33].trim() == '') {
					if (produtos[produtos.length - 1][38].trim() != '') {
						produtos[produtos.length - 1][33] = 'Marca:' + produtos[produtos.length - 1][38];	// atribuindo Marca na Tag
					}
				}
				
				// Aplicar Origem de acordo com a Marca (5 - Origem)
				if (produtos[produtos.length - 1][5].trim() == "") {
					produtos[produtos.length - 1][5] = get_origem(produtos[produtos.length - 1][38]);
				}
				
				// Aplicar NCM de acordo com a categoria (4 - Classificação fiscal)
				if (produtos[produtos.length - 1][4].trim() == "") {
					if (produtos[produtos.length - 1][57].trim() != "") { // Categoria
						produtos[produtos.length - 1][4] = get_ncmBling(produtos[produtos.length - 1][57]);
					}
				}
				
				// Aplicar CEST de acordo com a categoria (39 - CEST)
				if (produtos[produtos.length - 1][39].trim() == "") {
					if (produtos[produtos.length - 1][57].trim() != "") { // Categoria
						produtos[produtos.length - 1][39] = get_cestBling(produtos[produtos.length - 1][57]);
					}
				}
				
				// Aplicar Grupo de Produto de acordo com NCM-CEST-ORIGEM (37 - Grupo de produtos)
				//if (produtos[produtos.length - 1][37].trim() == "") {
					if (produtos[produtos.length - 1][4].trim() != "") { // NCM
						var nome_origem = '-Nacional';
						switch(produtos[produtos.length - 1][5]){ // Origem
							case '1': nome_origem = '-Importada'; break;
							case '2': nome_origem = '-Estrangeira'; break;
						}
						var nome_cest = (produtos[produtos.length - 1][39].trim() != "" ? "-" + produtos[produtos.length - 1][39].trim() : "");
						produtos[produtos.length - 1][37] = produtos[produtos.length - 1][4] + nome_cest.replaceAll('.', '') + nome_origem
					}
				//}
		}
		
		
		// Incluir informações nos filhos
		for (var i=0; i<produtos.length; i++) { // Linha por Linha
		
			// Inclui NCM de acordo com o tipo do produto
			// Origem
			// Grupo de produto
			if (produtos[i][35].trim() != '') { // se é variacao
			
				var j = 0;
				var j_tam = produtos.length;
				var controleWhile = true;
				while (j < j_tam && controleWhile) { // Linha por Linha
					if (produtos[i][35].trim() == produtos[j][1].trim()) {
						produtos[i][3] = produtos[j][3]; // Unidade
						produtos[i][4] = produtos[j][4]; // NCM
						produtos[i][5] = produtos[j][5]; // Origem
						produtos[i][37] = produtos[j][37]; // Grupo Produto
						produtos[i][39] = produtos[j][39]; // CEST
						produtos[i][33] = produtos[j][33]; // Tag
						produtos[i][38] = produtos[j][38]; // Marca
						produtos[i][57] = produtos[j][57]; // Categoria
						controleWhile = false;
						break;
					}
					j++;
				}
			}
		}
		
		
		
		var limite_arquivo = 5000;
		var csv_arquivos = [];
		
		var c_limite = 0;
		var c_csv = 0;
		for (var i = 0; i < produtos.length; i++) {
			if (c_limite >= limite_arquivo) {
				c_limite = 0;
				c_csv++;
			}
			c_limite++;
			if (csv_arquivos[c_csv] == undefined) {
				csv_arquivos[c_csv] = [];
			}
			csv_arquivos[c_csv].push(produtos[i].clone());
		}
		
		//var csv_cabecalho = 'ID;Codigo;Descricao;Unidade;Classificacao_fiscal;Origem;Preco;Valor_IPI_fixo;Observacoes;Situacao;Estoque;Preco_de_custo;Cod_no_fabricante;Fabricante;Localizacao;Estoque_maximo;Estoque_minimo;Peso_liquido_kg;Peso_bruto_kg;GTIN_EAN;GTIN_EAN_da_embalagem;Largura_do_Produto;Altura_do_Produto;Profundidade_do_produto;Data_Validade;Descricao_do_Produto_no_Fornecedor;Descricao_Complementar;Unidade_por_Caixa;Produto_Variacao;Tipo_Producao;Classe_de_enquadramento_do_IPI;Codigo_da_lista_de_servicos;Tipo_do_item;Grupo de Tags/Tags;Tributos;Código Pai;Código Integração;Grupo de Produtos;Marca;CEST;Volumes;Descrição curta;Cross-Docking;URL Imagens Externas;Link Externo;Meses Garantia;Clonar dados do pai;Condição do produto;Frete Grátis;Número FCI;Vídeo;Departamento;Unidade de medida';
		var csv_cabecalho = '"ID";"Codigo";"Descricao";"Unidade";"Classificacao_fiscal";"Origem";"Preco";"Valor_IPI_fixo";"Observacoes";"Situacao";"Estoque";"Preco_de_custo";"Cod_no_fabricante";"Fabricante";"Localizacao";"Estoque_maximo";"Estoque_minimo";"Peso_liquido_kg";"Peso_bruto_kg";"GTIN_EAN";"GTIN_EAN_da_embalagem";"Largura_do_Produto";"Altura_do_Produto";"Profundidade_do_produto";"Data_Validade";"Descricao_do_Produto_no_Fornecedor";"Descricao_Complementar";"Unidade_por_Caixa";"Produto_Variacao";"Tipo_Producao";"Classe_de_enquadramento_do_IPI";"Codigo_da_lista_de_servicos";"Tipo_do_item";"Grupo de Tags/Tags";"Tributos";"Código Pai";"Código Integração";"Grupo de Produtos";"Marca";"CEST";"Volumes";"Descrição curta";"Cross-Docking";"URL Imagens Externas";"Link Externo";"Meses Garantia";"Clonar dados do pai";"Condição do produto";"Frete Grátis";"Número FCI";"Vídeo";"Departamento";"Unidade de medida";"Preço de compra";"Valor base ICMS ST para retenção";"Valor ICMS ST para retenção";"Valor ICMS próprio do substituto";"Categoria do produto"';
		var BOM = "\uFEFF";
		
		console.info('csv_arquivos.length', csv_arquivos.length)
		
		var tempo3 = 0;
		
		var pConfig = {
			quotes: true, //or array of booleans
			quoteChar: '"',
			escapeChar: '"',
			delimiter: ";",
			header: false,
			newline: "\r\n",
			skipEmptyLines: false, //other option is 'greedy', meaning skip delimiters, quotes, and whitespace.
			columns: null //or array of strings
		}
		
		setTimeout(function(){
			for (var i = 0; i < csv_arquivos.length; i++) {
				//console.info('i', i)
				if (i == 1) {
					tempo3 += 6000;
				}
				tempo3 += 5000;
				var csv_limite = Papa.unparse(csv_arquivos[i], pConfig);
				
				var csvContent = "\uFEFF" + csv_cabecalho + '\n' + csv_limite;
					
				setTimeout(timeout3, tempo3, csvContent, 'OK-' + (i+1) + '-' +nome_arquivo);
			}
			
			tempo3 += 5000;
			
			setTimeout(function(){
				// Criar arquivos multiloja
				
				var multiloja_colunas = '';
				var multiloja = [];
				var multiloja_furlight = [];
				var multiloja_blight = [];
				
				var produtos_colunas = '';
				var p_indexId = 0;
				var p_indexId_loja = 1;
				var p_indexNome = 2;
				var p_indexCodigo = 3;
				var p_indexPreco = 4;
				var p_indexPrecoPromocional = 5;
				var p_indexId_fornecedor = 6;
				var p_indexId_marca = 7;
				var p_indexLinkExterno = 8;
				var p_indexNome_loja = 9;
			
				//status_arquivo = 0; // 0 - Colunas produtos; 	1 - Produtos;

				
				if (arquivoCSV_multiloja != '') {
					
					console.info('arquivoCSV_multiloja', arquivoCSV_multiloja.length)
		
					for (var i=0; i<arquivoCSV_multiloja.length; i++) { // Linha por Linha
						//if (i >= 2) { continue; }
						
						var fileLine = arquivoCSV_multiloja[i];
						
						//switch (status_arquivo) {						
							//case 0:
								
								//status_arquivo = 1;
								//break;
								
							//case 1:		
								
								if (!(fileLine[2] == undefined || fileLine[0] == 'IdProduto' || fileLine[0] == '') ) {
								
									
									multiloja_blight.push(fileLine.clone());
									multiloja_blight[multiloja_blight.length - 1][p_indexNome_loja] = "BLight E-commerce de Iluminação";
									
									var id = fileLine[p_indexId];
									var marcafm = '';
									var v_multiplicador = fator_multiplicador_valor_outro;
									//var v_multiplicador = origem_outros;
									
									for (var i2=0; i2 < produtos.length; i2++) {
										if (produtos[i2][0] == id){
											marcafm = produtos[i2][38];
											break;
										}
									}
									
									if (marcafm != '') {
										for( var m = 0; m < arquivo_modelo.length; m++){
											if (marcafm == arquivo_modelo[m][0]) {
												v_multiplicador = arquivo_modelo[m][1];
												//console.info('marca', marcafm)
												//console.info('v_multiplicador', v_multiplicador)
												break;
											}
										}
									}
									
									/*
									var preco = fileLine[p_indexPreco];
									preco = preco.replace('"', '');
									preco = preco.replace('"', '');
									preco = preco.unmask();
									if (fileLine[p_indexCodigo].indexOf("FL") == 0) {
										preco = preco * 0.4545454545;
									} else {
										preco = preco * v_multiplicador;
									}
									fileLine[p_indexPreco]	= preco.mask();
									*/
									
									var preco_promocional = fileLine[p_indexPrecoPromocional];
									preco_promocional = preco_promocional.replace('"', '');
									preco_promocional = preco_promocional.replace('"', '');
									preco_promocional = preco_promocional.unmask();
									
									fileLine[p_indexCodigo] = fileLine[p_indexCodigo].trim();
									
									/*if (fileLine[p_indexCodigo].indexOf("FL") == 0) {
										preco_promocional_Furlight = preco_promocional * 0.4545454545;
										fileLine[p_indexPrecoPromocional]	= preco_promocional_Furlight.mask();
										fileLine[p_indexPreco]				= preco_promocional_Furlight.mask();
										
										multiloja_furlight.push(fileLine.clone());
										multiloja_furlight[multiloja_furlight.length - 1][p_indexNome_loja] = "Furlight";
									}*/
									
									preco_promocional = preco_promocional * v_multiplicador;
									
									fileLine[p_indexPrecoPromocional]	= preco_promocional.mask();
									fileLine[p_indexPreco]				= preco_promocional.mask();
									
									multiloja.push(fileLine.clone());
									multiloja[multiloja.length - 1][p_indexNome_loja] = nome_loja;
																		
									
								}
								
								//break;
						//}
						
					}
					//console.info('produtos_colunas', produtos_colunas);
					//console.info('multiloja', multiloja);
					
					var pConfig = {
						quotes: true, //or array of booleans
						quoteChar: '"',
						escapeChar: '"',
						delimiter: ";",
						header: false,
						newline: "\r\n",
						skipEmptyLines: false, //other option is 'greedy', meaning skip delimiters, quotes, and whitespace.
						columns: null //or array of strings
					}
					
					// PREMIUM
					var csv2 = Papa.unparse(multiloja, pConfig);
					
					//var csv2_cabecalho = 'IdProduto;ID na Loja;Nome;Código;Preco;PrecoPromocional;ID do Fornecedor;ID da Marca;Nome Loja (Multilojas)';
					var csv2_cabecalho = '"IdProduto";"ID na Loja";"Nome";"Código";"Preco";"PrecoPromocional";"ID do Fornecedor";"ID da Marca";"Nome Loja (Multilojas)"';
					
					var BOM = "\uFEFF";
					var csv2Content = "\uFEFF" + csv2_cabecalho + '\n' + csv2;
					
					var blob2 = new Blob([csv2Content],
						{ type: "data:text/csv;charset=utf-8" });
					
					setTimeout(function(){
						saveAs(blob2, 'OK-'+nome_arquivo_multiloja);
						
						
						
						// BLGIHT
						var csvb = Papa.unparse(multiloja_blight, pConfig);
						
						var BOM = "\uFEFF";
						var csvbContent = "\uFEFF" + csv2_cabecalho + '\n' + csvb;
						
						var blobb = new Blob([csvbContent],
							{ type: "data:text/csv;charset=utf-8" });
						setTimeout(function(){
							saveAs(blobb, 'OK-BLIGHT-'+nome_arquivo_multiloja);
					
					
					
							// FURLIGHT
							if (multiloja_furlight.length > 0) {
								// Convert back to CSV
								var csv2 = Papa.unparse(multiloja_furlight, {"delimiter": ";"});
								
								var BOM = "\uFEFF";
								var csv2Content = "\uFEFF" + csv2_cabecalho + '\n' + csv2;
								
								var blob3 = new Blob([csv2Content],
									{ type: "data:text/csv;charset=utf-8" });
								
								setTimeout(function(){
									saveAs(blob3, 'OK-FURLIGHT-'+nome_arquivo_multiloja);
									
									$('#btn-executar').show();
									$('#msg-executar').hide();
								}, 3000);
							}else {
								$('#btn-executar').show();
								$('#msg-executar').hide();
							}
							
							
					
						}, 3000);
						
						
					}, 3000);
					
				
				} else {
					$('#btn-executar').show();
					$('#msg-executar').hide();
				}
		
			}, tempo3);
		}, ($('#inputCSV')[0].files.length * 1000));
		
	}
		
	// Clonar array
	Array.prototype.clone = function() {
		return this.slice(0);
	};
	
	
	function timeout3(csvContent, nome) {
		var blob = new Blob([csvContent],
			{ type: "data:text/csv;charset=utf-8" });
		saveAs(blob, nome);
	}
	
	
	/**
 * Convert data in CSV (comma separated value) format to a javascript array.
 *
 * Values are separated by a comma, or by a custom one character delimeter.
 * Rows are separated by a new-line character.
 *
 * Leading and trailing spaces and tabs are ignored.
 * Values may optionally be enclosed by double quotes.
 * Values containing a special character (comma's, double-quotes, or new-lines)
 *   must be enclosed by double-quotes.
 * Embedded double-quotes must be represented by a pair of consecutive 
 * double-quotes.
 *
 * Example usage:
 *   var csv = '"x", "y", "z"\n12.3, 2.3, 8.7\n4.5, 1.2, -5.6\n';
 *   var array = csv2array(csv);
 *  
 * Author: Jos de Jong, 2010
 * 
 * @param {string} data      The data in CSV format.
 * @param {string} delimeter [optional] a custom delimeter. Comma ',' by default
 *                           The Delimeter must be a single character.
 * @return {Array} array     A two dimensional array containing the data
 * @throw {String} error     The method throws an error when there is an
 *                           error in the provided data.
 */ 
function csv2array(data, delimeter) {
  // Retrieve the delimeter
  if (delimeter == undefined) 
    delimeter = ',';
  if (delimeter && delimeter.length > 1)
    delimeter = ',';

  // initialize variables
  var newline = '\n';
  var eof = '';
  var i = 0;
  var c = data.charAt(i);
  var row = 0;
  var col = 0;
  var array = new Array();

  while (c != eof) {
    // skip whitespaces
    while (c == ' ' || c == '\t' || c == '\r') {
      c = data.charAt(++i); // read next char
    }

    // get value
    var value = "";
    if (c == '\"') {
      // value enclosed by double-quotes
      c = data.charAt(++i);

      do {
        if (c != '\"') {
          // read a regular character and go to the next character
          value += c;
          c = data.charAt(++i);
        }

        if (c == '\"') {
          // check for escaped double-quote
          var cnext = data.charAt(i+1);
          if (cnext == '\"') {
            // this is an escaped double-quote. 
            // Add a double-quote to the value, and move two characters ahead.
            value += '\"';
            i += 2;
            c = data.charAt(i);
          }
        }
      }
      while (c != eof && c != '\"');

      if (c == eof) {
        throw "Unexpected end of data, double-quote expected";
      }

      c = data.charAt(++i);
    }
    else {
      // value without quotes
      while (c != eof && c != delimeter && c!= newline && c != ' ' && c != '\t' && c != '\r') {
        value += c;
        c = data.charAt(++i);
      }
    }

    // add the value to the array
    if (array.length <= row) 
      array.push(new Array());
    array[row].push(value);

    // skip whitespaces
    while (c == ' ' || c == '\t' || c == '\r') {
      c = data.charAt(++i);
    }

    // go to the next row or column
    if (c == delimeter) {
      // to the next column
      col++;
    }
    else if (c == newline) {
      // to the next row
      col = 0;
      row++;
    }
    else if (c != eof) {
      // unexpected character
      throw "Delimiter expected after character " + i;
    }

    // go to the next character
    c = data.charAt(++i);
  }  

  return array;
}

/*
* FileSaver.js
* A saveAs() FileSaver implementation.
*
* By Eli Grey, http://eligrey.com
*
* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)
* source  : http://purl.eligrey.com/github/FileSaver.js
*/

// The one and only way of getting global scope in all environments
// https://stackoverflow.com/q/3277182/1008999
var _global = typeof window === 'object' && window.window === window
  ? window : typeof self === 'object' && self.self === self
  ? self : typeof global === 'object' && global.global === global
  ? global
  : this

function bom (blob, opts) {
  if (typeof opts === 'undefined') opts = { autoBom: false }
  else if (typeof opts !== 'object') {
    console.warn('Deprecated: Expected third argument to be a object')
    opts = { autoBom: !opts }
  }

  // prepend BOM for UTF-8 XML and text/* types (including HTML)
  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
  if (opts.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })
  }
  return blob
}

function download (url, name, opts) {
  var xhr = new XMLHttpRequest()
  xhr.open('GET', url)
  xhr.responseType = 'blob'
  xhr.onload = function () {
    saveAs(xhr.response, name, opts)
  }
  xhr.onerror = function () {
    console.error('could not download file')
  }
  xhr.send()
}

function corsEnabled (url) {
  var xhr = new XMLHttpRequest()
  // use sync to avoid popup blocker
  xhr.open('HEAD', url, false)
  try {
    xhr.send()
  } catch (e) {}
  return xhr.status >= 200 && xhr.status <= 299
}

// `a.click()` doesn't work for all browsers (#465)
function click (node) {
  try {
    node.dispatchEvent(new MouseEvent('click'))
  } catch (e) {
    var evt = document.createEvent('MouseEvents')
    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,
                          20, false, false, false, false, 0, null)
    node.dispatchEvent(evt)
  }
}

var saveAs = _global.saveAs || (
  // probably in some web worker
  (typeof window !== 'object' || window !== _global)
    ? function saveAs () { /* noop */ }

  // Use download attribute first if possible (#193 Lumia mobile)
  : 'download' in HTMLAnchorElement.prototype
  ? function saveAs (blob, name, opts) {
    var URL = _global.URL || _global.webkitURL
    var a = document.createElement('a')
    name = name || blob.name || 'download'

    a.download = name
    a.rel = 'noopener' // tabnabbing

    // TODO: detect chrome extensions & packaged apps
    // a.target = '_blank'

    if (typeof blob === 'string') {
      // Support regular links
      a.href = blob
      if (a.origin !== location.origin) {
        corsEnabled(a.href)
          ? download(blob, name, opts)
          : click(a, a.target = '_blank')
      } else {
        click(a)
      }
    } else {
      // Support blobs
      a.href = URL.createObjectURL(blob)
      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s
      setTimeout(function () { click(a) }, 0)
    }
  }

  // Use msSaveOrOpenBlob as a second approach
  : 'msSaveOrOpenBlob' in navigator
  ? function saveAs (blob, name, opts) {
    name = name || blob.name || 'download'

    if (typeof blob === 'string') {
      if (corsEnabled(blob)) {
        download(blob, name, opts)
      } else {
        var a = document.createElement('a')
        a.href = blob
        a.target = '_blank'
        setTimeout(function () { click(a) })
      }
    } else {
      navigator.msSaveOrOpenBlob(bom(blob, opts), name)
    }
  }

  // Fallback to using FileReader and a popup
  : function saveAs (blob, name, opts, popup) {
    // Open a popup immediately do go around popup blocker
    // Mostly only available on user interaction and the fileReader is async so...
    popup = popup || open('', '_blank')
    if (popup) {
      popup.document.title =
      popup.document.body.innerText = 'downloading...'
    }

    if (typeof blob === 'string') return download(blob, name, opts)

    var force = blob.type === 'application/octet-stream'
    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari
    var isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent)

    if ((isChromeIOS || (force && isSafari)) && typeof FileReader !== 'undefined') {
      // Safari doesn't allow downloading of blob URLs
      var reader = new FileReader()
      reader.onloadend = function () {
        var url = reader.result
        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')
        if (popup) popup.location.href = url
        else location = url
        popup = null // reverse-tabnabbing #460
      }
      reader.readAsDataURL(blob)
    } else {
      var URL = _global.URL || _global.webkitURL
      var url = URL.createObjectURL(blob)
      if (popup) popup.location = url
      else location.href = url
      popup = null // reverse-tabnabbing #460
      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s
    }
  }
)

_global.saveAs = saveAs.saveAs = saveAs

if (typeof module !== 'undefined') {
  module.exports = saveAs;
}

function removeCaracterEspecial (especialChar){
        return especialChar.normalize("NFD").replace(/[^a-zA-Zs]/g, "");
}
</script>
